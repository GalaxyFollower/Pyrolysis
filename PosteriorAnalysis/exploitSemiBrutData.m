%Loads a file with data that has already been process to have the the rho,
%P and T matrices and exploits the data
function [time, yield Mout Mexits Mtot h_conv Re]=exploitSemiBrutData(nameOfFile)
load(nameOfFile)
%----------------estimation of the exit velocity of-gases---------------
dPdr=zeros(nt,1);
a_rho=zeros(param.np,param.order+1,param.nc);
h_conv=zeros(nt,1);
Mtot=zeros(nt,param.nc);
for i=1:nt
    r=[ri(1:param.nv);CM(end);ri(nv+1)];
    [a_P, intervals] =getPolynomials(CM,P(i,:)',r,param.unit,param.order);
    a_dPdr=differentiatePolynomials(a_P);
    dPdr(i)=evaluatePolynomials(a_dPdr,intervals,r(end));   
    for j=1:param.nc
        [a_rho(:,:,j), intervals] =getPolynomials(CM,rho(i,:,j)'...
            ,r,param.unit,param.order);
        Mtot(i,j)=4*pi*sum(volumeIntegral(a_rho(:,:,j),intervals,intervals));
    end
    param.rho_mean=3*sum(volumeIntegral(sum(a_rho,3) ...
        ,intervals,intervals))/param.r^3;
    [h_conv(i), Re]=hconv(param.Tinf,param);
    
    
end

K=(param.K(bio)-param.K(cha))*rho(:,end,bio)/param.rhob0+param.K(cha);
u=-K/param.mu.*dPdr;

%-------------porosity-------------
porosity=1-(1-param.porosity0)*(rho(:,:,bio)+rho(:,:,cha))/param.rhob0;

%------------Summary mass balances ----------------------
Mout(:,gou-param.nsc)=rho(:,end,gou).*u*4*pi*param.r^2;
Mout(:,gas-param.nsc)=rho(:,end,gas).*u*4*pi*param.r^2;

%initial mass
M0(:,solids)=reshape(rho(1,1,solids),[1 param.nsc])*(4*pi*param.r^3/3);
M0(:,gases)=reshape(porosity(1,1)*rho(1,1,gases), ...
    [1 param.ngc ])*(4*pi*param.r^3/3);

    
Mexits=cumtrapz(time,Mout,1);
yield=[Mtot(:,solids) Mexits]/sum(M0);

save(nameOfFile)

end